"use strict"

// все в js - является объектами (что очевидно)
// поэтому объекты можно создавать как через глобальный конструктор
const person = new Object({
    name: "Mike",
    age: 54,
    onFoot: function() {
        console.log(`${this.name} идет пешком`);
    }
});
person.onFoot();

const man = {
    name: "Ivan",
    age: 55,
    run: function() {                       // еще небольшое упоминание, что есть в js стрелочные функции
        console.log(`${this.name} бежит`);  // и просто function; так вот последние задают контекст данным
}                                           // попробуй поменять function на стрелочную и запись будет некорректной
};
man.run();

// все объекты содержат в себе так называемый __prototype__
// благодаря ему, мы можем у любого объекта вызвать различные методы, присутствующие по умолчанию
// например, toString();
// Как в C#, можно расширить функционал ОБЪЕКТОВ, добавив свое поле или же метод
// эдакий (C#) extension method для всех объектов 
Object.prototype.sayHello = function() {
    console.log("ВСЕМ ХААААААЙ!!!!");
}



// еще можно создавать свои прототипы и наследовать их
const elena = Object.create(person);
elena.name = "Elena";
elena.onFoot();


// прототипы вызываются по цепочке, тоесть
// у объекта elena есть кастомный прототип preson, в котором содержится базовый прототип 
// __prototype__. Когда мы обращаемся к полю или методу у объекта elena, то поиск идет по цепочке - 
// с нижнего уровня до верхнего - от прототипа к прототипу
// elena → person → __prototype__ (Object)

const str = new String("Я хочу пиццу с кока-коллой");
console.log(str);
console.log(str.bold());